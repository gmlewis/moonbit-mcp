// AUTO-GENERATED BY cmd/schema-to-types - DO NOT EDIT

///|
pub impl ToJson for CallToolResultContent with to_json(self) {
  match self {
    TextContent(v) => v.to_json()
    ImageContent(v) => v.to_json()
    AudioContent(v) => v.to_json()
    EmbeddedResource(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for CallToolResultContent with from_json(json, path) {

}

///|
pub impl ToJson for ClientNotification with to_json(self) {
  match self {
    CancelledNotification(v) => v.to_json()
    InitializedNotification(v) => v.to_json()
    ProgressNotification(v) => v.to_json()
    RootsListChangedNotification(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for ClientNotification with from_json(json, path) {

}

///|
pub impl ToJson for ClientRequest with to_json(self) {
  match self {
    InitializeRequest(v) => v.to_json()
    PingRequest(v) => v.to_json()
    ListResourcesRequest(v) => v.to_json()
    ReadResourceRequest(v) => v.to_json()
    SubscribeRequest(v) => v.to_json()
    UnsubscribeRequest(v) => v.to_json()
    ListPromptsRequest(v) => v.to_json()
    GetPromptRequest(v) => v.to_json()
    ListToolsRequest(v) => v.to_json()
    CallToolRequest(v) => v.to_json()
    SetLevelRequest(v) => v.to_json()
    CompleteRequest(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for ClientRequest with from_json(json, path) {

}

///|
pub impl ToJson for ClientResult with to_json(self) {
  match self {
    CustomResult(v) => v.to_json()
    CreateMessageResult(v) => v.to_json()
    ListRootsResult(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for ClientResult with from_json(json, path) {

}

///|
pub impl ToJson for CompleteRequestParamsRef with to_json(self) {
  match self {
    PromptReference(v) => v.to_json()
    ResourceReference(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for CompleteRequestParamsRef with from_json(json, path) {

}

///|
pub impl ToJson for IncludeContext with to_json(self) {
  match self {
    AllServers => "allServers".to_json()
    NoServers => "none".to_json()
    ThisServer => "thisServer".to_json()
  }
}

///|
pub impl @json.FromJson for IncludeContext with from_json(json, path) {
  guard json is String(s) else {
    raise @json.JsonDecodeError((path, "expected string"))
  }
  match s {
    "allServers" => AllServers
    "none" => NoServers
    "thisServer" => ThisServer
    _ =>
      raise @json.JsonDecodeError(
        (
          path,
          "expected one of: 'allServers', 'none', 'thisServer'; got '\{s}'",
        ),
      )
  }
}

///|
pub impl ToJson for CreateMessageResultContent with to_json(self) {
  match self {
    TextContent(v) => v.to_json()
    ImageContent(v) => v.to_json()
    AudioContent(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for CreateMessageResultContent with from_json(
  json,
  path
) {

}

///|
pub impl ToJson for EmbeddedResourceResource with to_json(self) {
  match self {
    TextResourceContents(v) => v.to_json()
    BlobResourceContents(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for EmbeddedResourceResource with from_json(json, path) {

}

///|
pub impl ToJson for LoggingLevel with to_json(self) {
  match self {
    Alert => "alert".to_json()
    Critical => "critical".to_json()
    Debug => "debug".to_json()
    Emergency => "emergency".to_json()
    Error => "error".to_json()
    Info => "info".to_json()
    Notice => "notice".to_json()
    Warning => "warning".to_json()
  }
}

///|
pub impl @json.FromJson for LoggingLevel with from_json(json, path) {
  guard json is String(s) else {
    raise @json.JsonDecodeError((path, "expected string"))
  }
  match s {
    "alert" => Alert
    "critical" => Critical
    "debug" => Debug
    "emergency" => Emergency
    "error" => Error
    "info" => Info
    "notice" => Notice
    "warning" => Warning
    _ =>
      raise @json.JsonDecodeError(
        (
          path,
          "expected one of: 'alert', 'critical', 'debug', 'emergency', 'error', 'info', 'notice', 'warning'; got '\{s}'",
        ),
      )
  }
}

///|
pub impl ToJson for PromptMessageContent with to_json(self) {
  match self {
    TextContent(v) => v.to_json()
    ImageContent(v) => v.to_json()
    AudioContent(v) => v.to_json()
    EmbeddedResource(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for PromptMessageContent with from_json(json, path) {

}

///|
pub impl ToJson for ReadResourceResultContents with to_json(self) {
  match self {
    TextResourceContents(v) => v.to_json()
    BlobResourceContents(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for ReadResourceResultContents with from_json(
  json,
  path
) {

}

///|
pub impl ToJson for Role with to_json(self) {
  match self {
    Assistant => "assistant".to_json()
    User => "user".to_json()
  }
}

///|
pub impl @json.FromJson for Role with from_json(json, path) {
  guard json is String(s) else {
    raise @json.JsonDecodeError((path, "expected string"))
  }
  match s {
    "assistant" => Assistant
    "user" => User
    _ =>
      raise @json.JsonDecodeError(
        (path, "expected one of: 'assistant', 'user'; got '\{s}'"),
      )
  }
}

///|
pub impl ToJson for SamplingMessageContent with to_json(self) {
  match self {
    TextContent(v) => v.to_json()
    ImageContent(v) => v.to_json()
    AudioContent(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for SamplingMessageContent with from_json(json, path) {

}

///|
pub impl ToJson for ServerNotification with to_json(self) {
  match self {
    CancelledNotification(v) => v.to_json()
    ProgressNotification(v) => v.to_json()
    ResourceListChangedNotification(v) => v.to_json()
    ResourceUpdatedNotification(v) => v.to_json()
    PromptListChangedNotification(v) => v.to_json()
    ToolListChangedNotification(v) => v.to_json()
    LoggingMessageNotification(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for ServerNotification with from_json(json, path) {

}

///|
pub impl ToJson for ServerRequest with to_json(self) {
  match self {
    PingRequest(v) => v.to_json()
    CreateMessageRequest(v) => v.to_json()
    ListRootsRequest(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for ServerRequest with from_json(json, path) {

}

///|
pub impl ToJson for ServerResult with to_json(self) {
  match self {
    CustomResult(v) => v.to_json()
    InitializeResult(v) => v.to_json()
    ListResourcesResult(v) => v.to_json()
    ReadResourceResult(v) => v.to_json()
    ListPromptsResult(v) => v.to_json()
    GetPromptResult(v) => v.to_json()
    ListToolsResult(v) => v.to_json()
    CallToolResult(v) => v.to_json()
    CompleteResult(v) => v.to_json()
  }
}

///|
pub impl @json.FromJson for ServerResult with from_json(json, path) {

}
